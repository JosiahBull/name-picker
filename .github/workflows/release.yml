name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Deploy to Supabase and Cloudflare
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Validate release tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid tag format. Must be in the format v1.2.3"
            exit 1
          fi
          
          echo "Releasing version: $TAG"
          echo "RELEASE_VERSION=$TAG" >> $GITHUB_ENV
      
      - name: Update version in package.json
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
          
          # Update root package.json
          jq --arg version "$VERSION_NO_V" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Update packages versions
          for pkg in packages/*/package.json; do
            jq --arg version "$VERSION_NO_V" '.version = $version' "$pkg" > "$pkg.tmp"
            mv "$pkg.tmp" "$pkg"
          done
          
          echo "Updated all package.json files to version $VERSION_NO_V"
      
      - name: Generate version file
        run: |
          cat > VERSION << EOF
          {
            "version": "${{ env.RELEASE_VERSION }}",
            "commit": "${{ github.sha }}",
            "date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "repository": "${{ github.repository }}"
          }
          EOF
          
          echo "Generated VERSION file:"
          cat VERSION
      
      - name: Build project
        run: |
          ./scripts/build.sh
          echo "Build completed successfully!"

      - name: Create release artifacts
        run: |
          # Create artifacts directory
          mkdir -p release-artifacts
          
          cp VERSION release-artifacts/

          # Create frontend build archive
          if [[ -d "packages/frontend/dist" ]]; then
            echo "Creating frontend build archive..."
            tar -czf release-artifacts/frontend-build-${{ env.RELEASE_VERSION }}.tar.gz -C packages/frontend dist
          fi
          
          # Create source maps archive if they exist
          if find packages/frontend/dist -name "*.map" -type f | grep -q .; then
            echo "Creating source maps archive..."
            find packages/frontend/dist -name "*.map" -type f -exec tar -czf release-artifacts/sourcemaps-${{ env.RELEASE_VERSION }}.tar.gz {} +
          fi
          
          # Archive Supabase migrations
          if [[ -d "supabase/migrations" ]]; then
            echo "Creating database migrations archive..."
            tar -czf release-artifacts/supabase-migrations-${{ env.RELEASE_VERSION }}.tar.gz -C supabase migrations
          fi
          
          # Create deployment info file
          cat > release-artifacts/deployment-info.json << EOF
          {
            "version": "${{ env.RELEASE_VERSION }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "repository": "${{ github.repository }}",
            "workflow_run": "${{ github.run_id }}",
            "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "deployment_targets": {
              "supabase": {
                "project_id": "${{ secrets.SUPABASE_PROJECT_ID }}"
              },
              "cloudflare": {
                "project_name": "${{ secrets.CLOUDFLARE_PROJECT_NAME }}"
              }
            }
          }
          EOF
          
          # Create build metadata
          cat > release-artifacts/build-metadata.json << EOF
          {
            "build_info": {
              "node_version": "$(node --version)",
              "pnpm_version": "$(pnpm --version)",
              "build_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "build_environment": "GitHub Actions",
              "runner_os": "${{ runner.os }}",
              "runner_arch": "${{ runner.arch }}"
            },
            "git_info": {
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "commit_message": "$(git log -1 --pretty=%B)",
              "author": "$(git log -1 --pretty=%an)",
              "author_email": "$(git log -1 --pretty=%ae)"
            }
          }
          EOF
          
          # Create checksums
          cd release-artifacts
          sha256sum * > checksums.sha256
          cd ..
          
          # List artifacts
          echo "Release artifacts created:"
          ls -la release-artifacts/
      
      - name: Run release script
        env:
          # Supabase secrets
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          
          # Cloudflare secrets
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          CLOUDFLARE_HOOK_ID: ${{ secrets.CLOUDFLARE_HOOK_ID }}
          
          # GitHub context
          GITHUB_REF_NAME: ${{ github.ref_name }}
          CI: true
        run: |
          ./scripts/release.sh
      
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ env.RELEASE_VERSION }}
          path: release-artifacts/
          retention-days: 90
      
      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          body: |
            ## Release ${{ env.RELEASE_VERSION }}
            
            ### Deployment Status
            ‚úÖ Successfully deployed to:
            - **Supabase**: Database migrations and Edge Functions
            - **Cloudflare Pages**: Frontend application
            
            ### Release Assets
            This release includes:
            - üì¶ Frontend build archive (`frontend-build-*.tar.gz`)
            - üó∫Ô∏è Source maps archive (`sourcemaps-*.tar.gz`)
            - üóÑÔ∏è Database migrations archive (`supabase-migrations-*.tar.gz`)
            - üìÑ Version information (`VERSION`)
            - üîß Deployment metadata (`deployment-info.json`)
            - üìä Build metadata (`build-metadata.json`)
            - üîê SHA256 checksums (`checksums.sha256`)
            
            ### What's Changed
            See the [commit history](https://github.com/${{ github.repository }}/compare/....${{ env.RELEASE_VERSION }}) for details.
            
            ### Deployment URLs
            - Supabase Dashboard: https://app.supabase.com/project/${{ secrets.SUPABASE_PROJECT_ID }}
            - Production Site: https://${{ secrets.CLOUDFLARE_PROJECT_NAME }}.pages.dev
          draft: false
          prerelease: false
          files: |
            release-artifacts/frontend-build-*.tar.gz
            release-artifacts/sourcemaps-*.tar.gz
            release-artifacts/supabase-migrations-*.tar.gz
            release-artifacts/VERSION
            release-artifacts/deployment-info.json
            release-artifacts/build-metadata.json
            release-artifacts/checksums.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Post deployment notification
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Release ${{ github.ref_name }} deployed successfully!"
          else
            echo "‚ùå Release ${{ github.ref_name }} deployment failed!"
            exit 1
          fi
